<?xml version="1.0" encoding="utf-8"?>
<resources>
	<!-- Screen brightness used to dim the screen when the user activity
         timeout expires.  May be less than the minimum allowed brightness setting
         that can be set by the user. -->
	<integer name="config_screenBrightnessDim">41</integer>
	
	<!-- User activity timeout: Maximum screen dim duration as a percentage of screen off timeout.
    
         This resource is similar to config_maximumScreenDimDuration but the maximum
         screen dim duration is defined as a ratio of the overall screen off timeout
         instead of as an absolute value in milliseconds.  This is useful for reducing
         the dim duration when the screen off timeout is very short.
    
         When computing the screen dim duration, the power manager uses the lesser
         of the effective durations expressed by config_maximumScreenDimDuration and
         config_maximumScreenDimRatio.
    
         This value must be between 0% and 100%.  If the value is zero, the screen will not
         dim before the device goes to sleep.
    -->
	<fraction name="config_maximumScreenDimRatio">29.999996%</fraction>
	
	<!-- Screen brightness used to dim the screen while dozing in a very low power state.
         May be less than the minimum allowed brightness setting
         that can be set by the user. -->
	<integer name="config_screenBrightnessDoze">15</integer>

    <!-- Whether the always on display mode is available. -->
    <bool name="config_dozeAlwaysOnDisplayAvailable">true</bool>

    <!-- Control whether the always on display mode is enabled by default. This value will be used
         during initialization when the setting is still null. -->
    <bool name="config_dozeAlwaysOnEnabled">false</bool>

    <!-- Power Management: Specifies whether to decouple the interactive state of the
         device from the display on/off state.
         When false, setInteractive(..., true) will be called before the display is turned on
         and setInteractive(..., false) will be called after the display is turned off.
         This mode provides best compatibility for devices that expect the interactive
         state to be tied to the display state.
         When true, setInteractive(...) will be called independently of whether the display
         is being turned on or off.  This mode enables the power manager to reduce
         clocks and disable the touch controller while the display is on.
         This resource should be set to "true" when a doze component has been specified
         to maximize power savings but not all devices support it.
         Refer to power.h for details.
    -->
    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>
	
	<!-- If true, the doze component is not started until after the screen has been turned off
         and the screen off animation has been performed. -->
	<bool name="config_dozeAfterScreenOffByDefault">true</bool>
	
	<!-- Whether the display blanks itself when transitioning from a doze to a non-doze state -->
	<bool name="config_displayBlanksAfterDoze">false</bool>
	
	<!-- An array describing the screen's backlight values corresponding to the brightness
         values in the config_screenBrightnessNits array.
         This array should be equal in size to config_screenBrightnessBacklight. -->
	<integer-array name="config_screenBrightnessBacklight">
		<item>1</item>
		<item>612</item>
	</integer-array>
	
	<!-- An array of floats describing the screen brightness in nits corresponding to the backlight
         values in the config_screenBrightnessBacklight array.  On OLED displays these  values
         should be measured with an all white image while the display is in the fully on state.
         Note that this value should *not* reflect the maximum brightness value for any high
         brightness modes but only the maximum brightness value obtainable in a sustainable manner.
         This array should be equal in size to config_screenBrightnessBacklight -->
	<array name="config_screenBrightnessNits">
		<item>1</item>
		<item>1300</item>
	</array>
	
	<!-- Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. -->
	<integer name="config_screenBrightnessSettingMinimum">1</integer>
	
	<!-- Maximum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness above this level. -->
	<integer name="config_screenBrightnessSettingMaximum">1300</integer>
	
	<!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used
         for debouncing the light sensor.  Different constants are used to debounce the light sensor
         when adapting to brighter or darker environments.  This parameter controls how quickly
         brightness changes occur in response to an observed change in light level that exceeds the
         hysteresis threshold. -->
	<integer name="config_autoBrightnessBrighteningLightDebounce">800</integer>
	<integer name="config_autoBrightnessDarkeningLightDebounce">800</integer>
	
	<!-- Fast brightness animation ramp rate in brightness units per second-->
	<integer name="config_brightness_ramp_rate_fast">1800</integer>
	
	<!-- Slow brightness animation ramp rate in brightness units per second-->
	<integer name="config_brightness_ramp_rate_slow">600</integer>
	
	<!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
	<bool name="config_automatic_brightness_available">true</bool>
	
	<!-- Amount of time it takes for the light sensor to warm up in milliseconds.
         For this time after the screen turns on, the Power Manager
         will not debounce light sensor readings -->
	<integer name="config_lightSensorWarmupTime">200</integer>
	
	<!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N  1 zones as follows:
         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1     array[N] <= LUX < infinity
         Must be overridden in platform specific overlays -->
	<integer-array name="config_autoBrightnessLevels">
		<item>1</item>
		<item>2</item>
		<item>3</item>
		<item>4</item>
		<item>5</item>
		<item>10</item>
		<item>15</item>
		<item>20</item>
		<item>25</item>
		<item>30</item>
		<item>40</item>
		<item>50</item>
		<item>100</item>
		<item>150</item>
		<item>250</item>
		<item>300</item>
		<item>350</item>
		<item>400</item>
		<item>450</item>
		<item>500</item>
		<item>550</item>
		<item>600</item>
		<item>700</item>
		<item>1000</item>
		<item>1500</item>
		<item>2000</item>
		<item>2500</item>
		<item>3000</item>
		<item>4000</item>
		<item>5000</item>
		<item>6000</item>
		<item>7000</item>
		<item>8000</item>
		<item>9000</item>
		<item>10000</item>
		<item>20000</item>
		<item>50000</item>
		<item>999999</item>
	</integer-array>
	
	<!-- Array of desired screen brightness in nits corresponding to the lux values
         in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
         config_screenBrightnessMaximumNits, the display brightness is defined as the measured
         brightness of an all-white image.
         If this is defined then:
            - config_autoBrightnessLcdBacklightValues should not be defined
            - config_screenBrightnessNits must be defined
            - config_screenBrightnessBacklight must be defined
         This array should have size one greater than the size of the config_autoBrightnessLevels
         array. The brightness values must be non-negative and non-decreasing. This must be
         overridden in platform specific overlays -->
	<array name="config_autoBrightnessDisplayValuesNits">
		<item>1</item>
		<item>12</item>
		<item>17</item>
		<item>25</item>
		<item>30</item>
		<item>35</item>
		<item>40</item>
		<item>62</item>
		<item>85</item>
		<item>108</item>
		<item>122</item>
		<item>152</item>
		<item>184</item>
		<item>205</item>
		<item>223</item>
		<item>249</item>
		<item>275</item>
		<item>300</item>
		<item>335</item>
		<item>376</item>
		<item>400</item>
		<item>420</item>
		<item>445</item>
		<item>468</item>
		<item>515</item>
		<item>543</item>
		<item>583</item>
		<item>610</item>
		<item>630</item>
		<item>667</item>
		<item>690</item>
		<item>705</item>
		<item>753</item>
		<item>806</item>
		<item>900</item>
		<item>1000</item>
		<item>1200</item>
		<item>1300</item>
		<item>1500</item>
	</array>
	
	<!-- Display has physical cutout -->
	<string name="config_mainBuiltInDisplayCutout">M 0,0 H -9.333333333333333 V 27 H 9.333333333333333 V 0 H 0 Z @dp</string>
	
	<!-- Height of the status bar in portrait -->
	<dimen name="status_bar_height">102px</dimen>
	
	<!-- Radius of the software rounded corners at the top of the display in its natural
        orientation. If zero, the value of rounded_corner_radius is used. -->
	<dimen name="rounded_corner_radius_top">12dp</dimen>
	
	<!-- Radius of the software rounded corners at the bottom of the display in its natural
        orientation. If zero, the value of rounded_corner_radius is used. -->
	<dimen name="rounded_corner_radius_bottom">12dp</dimen>
	
	<!-- If true, the display will be shifted around in ambient mode. -->
	<bool name="config_enableBurnInProtection">true</bool>
	
	<!-- Minimum allowable screen brightness to use in a very dark room.
         This value sets the floor for the darkest possible auto-brightness
         adjustment.  It is expected to be somewhat less than the first entry in
         config_autoBrightnessLcdBacklightValues so as to allow the user to have
         some range of adjustment to dim the screen further than usual in very
         dark rooms. The contents of the screen must still be clearly visible
         in darkness (although they may not be visible in a bright room). -->
	<integer name="config_screenBrightnessDark">1</integer>
	
	<!-- The default refresh rate for a given device. Change this value to set a higher default
         refresh rate. If the hardware composer on the device supports display modes with a higher
         refresh rate than the default value specified here, the framework may use those higher
         refresh rate modes if an app chooses one by setting preferredDisplayModeId or calling
         setFrameRate().
         If a non-zero value is set for config_defaultPeakRefreshRate, then
         config_defaultRefreshRate may be set to 0, in which case the value set for
         config_defaultPeakRefreshRate will act as the default frame rate. -->
    <integer name="config_defaultRefreshRate">0</integer>

    <!-- The default peak refresh rate for a given device. Change this value if you want to prevent
         the framework from using higher refresh rates, even if display modes with higher refresh
         rates are available from hardware composer. Only has an effect if the value is
         non-zero. -->
    <integer name="config_defaultPeakRefreshRate">120</integer>

	<!-- The display uses different gamma curves for different refresh rates. It's hard for panel
         vendor to tune the curves to have exact same brightness for different refresh rate. So
         flicker could be observed at switch time. The issue is worse at the gamma lower end.
         In addition, human eyes are more sensitive to the flicker at darker environment.
         To prevent flicker, we only support higher refresh rates if the display brightness is above
         a threshold. And the darker environment could have higher threshold.
         For example, no higher refresh rate if
         display brightness <= disp0 && ambient brightness <= amb0
         || display brightness <= disp1 && ambient brightness <= amb1
    -->
    <integer-array name="config_brightnessThresholdsOfPeakRefreshRate">
        <item>10</item> <!-- 33% UI brightness -->
        <item>14</item> <!-- 40% UI brightness -->
    </integer-array>
    <integer-array name="config_ambientThresholdsOfPeakRefreshRate">
        <item>-1</item>
        <item>20</item>
    </integer-array>

    <!-- Default refresh rate in the zone defined by brightness and ambient thresholds.
         If non-positive, then the refresh rate is unchanged even if thresholds are configured. -->
    <integer name="config_defaultRefreshRateInZone">120</integer>

	<!-- Corner radii for that good old Pixel look. -->
	<dimen name="config_bottomDialogCornerRadius">16dp</dimen>
    <dimen name="config_buttonCornerRadius">4dp</dimen>
    <dimen name="config_dialogCornerRadius">28dp</dimen>

	<!-- Vibrator pattern to be used as the default for notifications
         that specify DEFAULT_VIBRATE.
     -->
    <integer-array name="config_defaultNotificationVibePattern">
        <item>0</item>
        <item>250</item>
        <item>250</item>
        <item>250</item>
    </integer-array>

	<!-- Enables or disables haptic effect when the text insertion/selection handle is moved
         manually by the user. Off by default, since the expected haptic feedback may not be
         available on some devices. -->
    <bool name="config_enableHapticTextHandle">true</bool>

	<!-- Indicate whether to allow the device to suspend when the screen is off
         due to the proximity sensor.  This resource should only be set to true
         if the sensor HAL correctly handles the proximity sensor as a wake-up source.
         Otherwise, the device may fail to wake out of suspend reliably.
         The default is false. -->
    <bool name="config_suspendWhenScreenOffDueToProximity">true</bool>

	<!-- The default journal mode to use use when Write-Ahead Logging is not active.
         Choices are: OFF, DELETE, TRUNCATE, PERSIST and MEMORY.
         PERSIST may improve performance by reducing how often journal blocks are
         reallocated (compared to truncation) resulting in better data block locality
         and less churn of the storage media.
         The PERSIST mode results in data persisting in the journal beyond the life of
         a transaction, so it interacts poorly with SECURE_DELETE. -->
    <string name="db_default_journal_mode" translatable="false">PERSIST</string>

	<!-- The database synchronization mode when using the default journal mode.
         FULL is safest and preserves durability at the cost of extra fsyncs.
         NORMAL also preserves durability in non-WAL modes and uses checksums to ensure
         integrity although there is a small chance that an error might go unnoticed.
         Choices are: FULL, NORMAL, OFF. -->
    <string name="db_default_sync_mode" translatable="false">OFF</string>

	<!-- The database synchronization mode when using Write-Ahead Logging.
         From https://www.sqlite.org/pragma.html#pragma_synchronous:
         WAL mode is safe from corruption with synchronous=NORMAL, and probably DELETE mode is safe
         too on modern filesystems. WAL mode is always consistent with synchronous=NORMAL, but WAL
         mode does lose durability. A transaction committed in WAL mode with
         synchronous=NORMAL might roll back following a power loss or system crash.
         Transactions are durable across application crashes regardless of the synchronous setting
         or journal mode. The synchronous=NORMAL setting is a good choice for most applications
         running in WAL mode.
         Choices are: FULL, NORMAL, OFF. -->
    <string name="db_wal_sync_mode" translatable="false">OFF</string>

	<!-- If this is true, device supports Sustained Performance Mode. -->
    <bool name="config_sustainedPerformanceModeSupported">true</bool>

	<!-- The list of components which should be automatically disabled for a specific device. -->
    <string-array name="config_deviceDisabledComponents" translatable="false">
        <item>com.google.android.gms/com.google.android.gms.nearby.messages.service.NearbyMessagesService</item>
        <item>com.google.android.gms/com.google.android.gms.nearby.discovery.service.DiscoveryService</item>
    </string-array>
	
</resources>
